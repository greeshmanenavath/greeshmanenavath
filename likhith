1. Import Statements
java
Copy code
import java.util.LinkedList;
The LinkedList class is imported to use as the data structure for the adjacency list. Each vertex will have a list of its adjacent vertices.
2. Class Definition and Fields
java
Copy code
public class DFS {
    private LinkedList<Integer> adjlist[];
    private boolean visited[];
adjlist[]: This array of LinkedList represents the adjacency list of the graph, where each index corresponds to a vertex and holds a list of all vertices adjacent to it.
visited[]: This boolean array tracks whether each vertex has been visited during the DFS traversal.
3. Constructor
java
Copy code
public DFS(int vertices) {
    adjlist = new LinkedList[vertices];
    visited = new boolean[vertices];
    for (int i = 0; i < vertices; i++) {
        adjlist[i] = new LinkedList<>();
    }
}
This constructor initializes the graph with a specified number of vertices.
adjlist is initialized as an array of LinkedList, where each index represents a vertex, and each LinkedList holds the adjacent vertices.
The visited array is initialized to keep track of the visited status of each vertex, initially set to false.
The for loop goes through each vertex and initializes an empty LinkedList for it in adjlist[].
4. Adding an Edge
java
Copy code
public void addEdge(int src, int dest) {
    adjlist[src].add(dest);
}
addEdge method adds a directed edge from src to dest. This means dest is a neighbor of src.
In an undirected graph, you’d add an edge in both directions (i.e., add src to dest's list as well), but here it’s a directed graph.
5. Depth-First Search (DFS) Method
java
Copy code
public void dfs(int vertex) {
    visited[vertex] = true;
    System.out.print(vertex + " ");
    for (int neighbor : adjlist[vertex]) {
        if (!visited[neighbor]) {
            dfs(neighbor);
        }
    }
}
dfs is the recursive DFS function, which performs the actual traversal.
visited[vertex] = true;: Marks the current vertex as visited.
System.out.print(vertex + " ");: Prints the current vertex as part of the DFS traversal.
for (int neighbor : adjlist[vertex]): Iterates over each adjacent vertex (neighbor) of the current vertex.
if (!visited[neighbor]): Checks if the adjacent vertex has not been visited.
dfs(neighbor);: Recursively calls dfs for the unvisited neighbor, exploring as far as possible along this path before backtracking.
6. Main Method
java
Copy code
public static void main(String[] args) {
    int vertices = 10;
    DFS graph = new DFS(vertices);
    graph.addEdge(0, 1);
    graph.addEdge(0, 2);
    graph.addEdge(1, 3);
    graph.addEdge(1, 4);
    graph.addEdge(2, 5);
    graph.addEdge(2, 6);
    graph.addEdge(3, 7);
    graph.addEdge(4, 8);
    graph.addEdge(5, 9);
    System.out.println("Depth First Search traversal starting from vertex 0:");
    graph.dfs(0);
}
The main method initializes the graph with 10 vertices.
addEdge method is used to add edges between vertices, creating the structure of the graph.
Example: graph.addEdge(0, 1); adds an edge from vertex 0 to vertex 1.
graph.dfs(0);: Starts the DFS traversal from vertex 0.
System.out.println(...): Prints "Depth First Search traversal starting from vertex 0:" as an introductory message before the traversal output.
Example Execution
With the edges given in the main method, the graph’s structure is:

markdown
Copy code
0 → 1 → 3 → 7
  |   |
  |   → 4 → 8
  |
  → 2 → 5 → 9
      |
      → 6
DFS Traversal Output Starting from Vertex 0:

Starting from vertex 0, DFS will follow the path 0 → 1 → 3 → 7 first.
After reaching 7, it backtracks to 3 and goes to the next unvisited adjacent vertices.
